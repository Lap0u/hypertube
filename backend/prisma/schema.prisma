// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                  Int @id @default(autoincrement())
  username            String  @unique()
  email               String  @unique()
  password            String?
  lastName            String  @default("")
  firstName           String  @default("")
  preferredLanguage   String  @default("")
  profilePictureUrl   String  @default("")
  refreshToken        String  @default("")
  comments            Comment[]
  resetPasswordTokens ResetPasswordToken[]
  watchedMovies       WatchedMovie[]
  createdAt           DateTime @default(now())
}

model Comment {
  id        Int @id @default(autoincrement())
  author    User @relation(fields: [authorId], references: [id])
  authorId  Int
  content   String
  movie     Movie @relation(fields: [movieId], references: [imdbId])
  movieId   String
  createAt  DateTime @default(now())
}

model Movie {
  id        Int @id @default(autoincrement())
  imdbId    String @unique()
  title     String
  path      String
  watched   WatchedMovie[] 
  comments  Comment[]
}

model WatchedMovie {
  id        Int @id @default(autoincrement())
  movie     Movie @relation(fields: [movieId], references: [id])
  movieId   Int
  user      User @relation(fields: [userId], references: [id])
  userId    Int
  watchedAt DateTime @default(now())
}

model ResetPasswordToken {
  token     String  @unique()
  user      User    @relation(fields: [userId], references: [id])
  userId    Int
  expiredAt DateTime
}